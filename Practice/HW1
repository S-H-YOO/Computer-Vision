#include "openFileDialog.h" // OpenFileDialog 헤더 포함
#include "saveFileDialog.h" // SaveFileDialog 헤더 포함
#include <opencv2/opencv.hpp>
#include <GL/glut.h>
#include <GL/glui.h>
#include <iostream>

using namespace std;
using namespace cv;

GLint src_x1 = 0, src_y1 = 0, src_x2 = 4, src_y2 = 0, src_x3 = 0, src_y3 = 4, src_x4 = 4, src_y4 = 4;
GLint dst_x1 = 0, dst_y1 = 0, dst_x2 = 4, dst_y2 = 0, dst_x3 = 0, dst_y3 = 4, dst_x4 = 4, dst_y4 = 4;
GLint rf = 0;
// 점들에 대한 좌표 배열

GLint points[4][2] = {
    {src_x1, src_y1},
    {src_x2, src_y2},
    {src_x3, src_y3},
    {src_x4, src_y4}
};

GLint out_points[4][2] = {
    {dst_x1, dst_y1},
    {dst_x2, dst_y2},
    {dst_x3, dst_y3},
    {dst_x4, dst_y4},

};


int perspective = 1;
int toggle_time = 0;

GLUI_Spinner* src_x1_spinner;
GLUI_Spinner* src_x2_spinner;
GLUI_Spinner* src_x3_spinner;
GLUI_Spinner* src_x4_spinner;

GLUI_Spinner* src_y1_spinner;
GLUI_Spinner* src_y2_spinner;
GLUI_Spinner* src_y3_spinner;
GLUI_Spinner* src_y4_spinner;

GLUI_Spinner* dst_x1_spinner;
GLUI_Spinner* dst_x2_spinner;
GLUI_Spinner* dst_x3_spinner;
GLUI_Spinner* dst_x4_spinner;

GLUI_Spinner* dst_y1_spinner;
GLUI_Spinner* dst_y2_spinner;
GLUI_Spinner* dst_y3_spinner;
GLUI_Spinner* dst_y4_spinner;

String Filename;

// 초기 빈 화면 생성
Mat img = Mat::zeros(Size(400, 400), CV_8UC3); 
Mat out = Mat::zeros(Size(400, 400), CV_8UC3);

int drawing = false;
int main_window;


void Perspective_in(int i) {
    Mat temp_img = img.clone();
    Mat temp_out = out.clone();

    if (rf == 1) {
        if (i == 0) {
            Point2f inputp[3], outputp[3];
            inputp[0] = Point2f(src_x1, src_y1);
            inputp[1] = Point2f(src_x2, src_y2);
            inputp[2] = Point2f(src_x3, src_y3);

            outputp[0] = Point2f(dst_x1, dst_y1);
            outputp[1] = Point2f(dst_x2, dst_y2);
            outputp[2] = Point2f(dst_x3, dst_y3);

            Mat h = getPerspectiveTransform(inputp, outputp);
            warpPerspective(temp_img, out, h, img.size());
        }
        else if (i == 1) {
            Point2f inputp[4], outputp[4];
            inputp[0] = Point2f(src_x1, src_y1);
            inputp[1] = Point2f(src_x2, src_y2);
            inputp[2] = Point2f(src_x3, src_y3);
            inputp[3] = Point2f(src_x4, src_y4);

            outputp[0] = Point2f(dst_x1, dst_y1);
            outputp[1] = Point2f(dst_x2, dst_y2);
            outputp[2] = Point2f(dst_x3, dst_y3);
            outputp[3] = Point2f(dst_x4, dst_y4);

            Mat h = getPerspectiveTransform(inputp, outputp);
            warpPerspective(temp_img, out, h, img.size());
        }
        imshow("dst", out);
    }
    if (perspective == 0) {
        for (int i = 0; i < 3; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }

    }
    else if (perspective == 1) {
        for (int i = 0; i < 4; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }

    }
    temp_out = out.clone();
    if (toggle_time) {
        for (int j = 0; j < (perspective == 0 ? 3 : 4); j++) {
            circle(temp_out, Point(out_points[j][0], out_points[j][1]), 3, Scalar(255, 255, 255), 3);
        }
    }

    imshow("src", temp_img);
    imshow("dst", temp_out);
    glutPostRedisplay();
}

void update_spinners(int i) {
    Mat temp_img = img.clone();
    Mat temp_out = out.clone();

    if (rf == 1) {
        if (i == 0) {
            src_x4_spinner->disable();
            src_y4_spinner->disable();
            dst_x4_spinner->disable();
            dst_y4_spinner->disable();
        }
        else if (i == 1) {
            src_x4_spinner->enable();
            src_y4_spinner->enable();
            dst_x4_spinner->enable();
            dst_y4_spinner->enable();
        }
        imshow("src", temp_img);
        Perspective_in(perspective);
    }

}


double euclideanDistance(int x1, int y1, int x2, int y2) {
    return sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));

}


int findClosestPoint(int x, int y) {
    double min_distance = DBL_MAX;
    double distance;

    int temp_PointIndex;

    for (int i = 0; i < 4; i++) {
        distance = euclideanDistance(x, y, points[i][0], points[i][1]);
        if (distance < min_distance) {
            min_distance = distance;
            temp_PointIndex = i;
        }
    }
    return temp_PointIndex;
}



void spinnerCallback2(int) {


    src_x1 = points[0][0];
    src_y1 = points[0][1];
    src_x2 = points[1][0];
    src_y2 = points[1][1];
    src_x3 = points[2][0];
    src_y3 = points[2][1];
    src_x4 = points[3][0];
    src_y4 = points[3][1];

    dst_x1 = out_points[0][0];
    dst_y1 = out_points[0][1];
    dst_x2 = out_points[1][0];
    dst_y2 = out_points[1][1];
    dst_x3 = out_points[2][0];
    dst_y3 = out_points[2][1];
    dst_x4 = out_points[3][0];
    dst_y4 = out_points[3][1];

    Mat temp_img = img.clone();
    if (perspective == 0) {
        for (int i = 0; i < 3; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
        Perspective_in(perspective);

    }
    else if (perspective == 1) {
        for (int i = 0; i < 4; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
        Perspective_in(perspective);

    }
    imshow("src", temp_img);
}


void Perspective(int i) {
    Mat temp_img, temp_out;
    temp_img = img.clone();

    update_spinners(perspective);
    spinnerCallback2(0);
    if (rf == 1) {
        if (i == 0) {



            Point2f inputp[3], outputp[3];
            inputp[0] = Point2f(src_x1, src_y1);
            inputp[1] = Point2f(src_x2, src_y2);
            inputp[2] = Point2f(src_x3, src_y3);

            outputp[0] = Point2f(dst_x1, dst_y1);
            outputp[1] = Point2f(dst_x2, dst_y2);
            outputp[2] = Point2f(dst_x3, dst_y3);

            Mat h = getPerspectiveTransform(inputp, outputp);
            warpPerspective(temp_img, out, h, img.size());
            imshow("dst", out);


        }
        else if (i == 1) {

            Point2f inputp[4], outputp[4];
            inputp[0] = Point2f(src_x1, src_y1);
            inputp[1] = Point2f(src_x2, src_y2);
            inputp[2] = Point2f(src_x3, src_y3);
            inputp[3] = Point2f(src_x4, src_y4);

            outputp[0] = Point2f(dst_x1, dst_y1);
            outputp[1] = Point2f(dst_x2, dst_y2);
            outputp[2] = Point2f(dst_x3, dst_y3);
            outputp[3] = Point2f(dst_x4, dst_y4);

            Mat h = getPerspectiveTransform(inputp, outputp);
            warpPerspective(temp_img, out, h, img.size());
            imshow("dst", out);

        }
        temp_out = out.clone();
        if (toggle_time) {
            for (int j = 0; j < (perspective == 0 ? 3 : 4); j++) {
                circle(temp_out, Point(out_points[j][0], out_points[j][1]), 3, Scalar(255, 255, 255), 3);
            }
        }

        Perspective_in(perspective);
        imshow("src", temp_img);
        imshow("dst", temp_out);
        glutPostRedisplay();

    }
}



void spinnerCallback(int) {

    src_x1 = points[0][0];
    src_y1 = points[0][1];
    src_x2 = points[1][0];
    src_y2 = points[1][1];
    src_x3 = points[2][0];
    src_y3 = points[2][1];
    src_x4 = points[3][0];
    src_y4 = points[3][1];

    dst_x1 = out_points[0][0];
    dst_y1 = out_points[0][1];
    dst_x2 = out_points[1][0];
    dst_y2 = out_points[1][1];
    dst_x3 = out_points[2][0];
    dst_y3 = out_points[2][1];
    dst_x4 = out_points[3][0];
    dst_y4 = out_points[3][1];

    Mat temp_img = img.clone();
    if (perspective == 0) {
        for (int i = 0; i < 3; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
        Perspective(perspective);

    }
    else if (perspective == 1) {
        for (int i = 0; i < 4; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
        Perspective(perspective);

    }
    imshow("src", temp_img);
}

void setSpinner() {

    src_x1_spinner->set_int_val(points[0][0]);
    src_y1_spinner->set_int_val(points[0][1]);

    src_x2_spinner->set_int_val(points[1][0]);
    src_y2_spinner->set_int_val(points[1][1]);

    src_x3_spinner->set_int_val(points[2][0]);
    src_y3_spinner->set_int_val(points[2][1]);

    src_x4_spinner->set_int_val(points[3][0]);
    src_y4_spinner->set_int_val(points[3][1]);

    dst_x1_spinner->set_int_val(out_points[0][0]);
    dst_y1_spinner->set_int_val(out_points[0][1]);

    dst_x2_spinner->set_int_val(out_points[1][0]);
    dst_y2_spinner->set_int_val(out_points[1][1]);

    dst_x3_spinner->set_int_val(out_points[2][0]);
    dst_y3_spinner->set_int_val(out_points[2][1]);

    dst_x4_spinner->set_int_val(out_points[3][0]);
    dst_y4_spinner->set_int_val(out_points[3][1]);


    spinnerCallback(perspective);

}

void dst_drawCircle(int event, int x, int y, int, void* param) {



    static int Min_PointIndex = -1; 
    Mat temp_img = out.clone();

    if (event == EVENT_LBUTTONDOWN) {
        drawing = true;
        Min_PointIndex = findClosestPoint(x, y);
        out_points[Min_PointIndex][0] = x;
        out_points[Min_PointIndex][1] = y;

        src_x1_spinner->set_int_val(points[0][0]);
        src_y1_spinner->set_int_val(points[0][1]);

        src_x2_spinner->set_int_val(points[1][0]);
        src_y2_spinner->set_int_val(points[1][1]);

        src_x3_spinner->set_int_val(points[2][0]);
        src_y3_spinner->set_int_val(points[2][1]);

        src_x4_spinner->set_int_val(points[3][0]);
        src_y4_spinner->set_int_val(points[3][1]);

        dst_x1_spinner->set_int_val(out_points[0][0]);
        dst_y1_spinner->set_int_val(out_points[0][1]);

        dst_x2_spinner->set_int_val(out_points[1][0]);
        dst_y2_spinner->set_int_val(out_points[1][1]);

        dst_x3_spinner->set_int_val(out_points[2][0]);
        dst_y3_spinner->set_int_val(out_points[2][1]);

        dst_x4_spinner->set_int_val(out_points[3][0]);
        dst_y4_spinner->set_int_val(out_points[3][1]);

        if (perspective == 0) {
            for (int i = 0; i < 3; i++) {
                if (toggle_time) {
                    circle(temp_img, Point(out_points[i][0], out_points[i][1]), 3, Scalar(255, 255, 255), 3);
                }
            }
        }
        else if (perspective == 1) {
            for (int i = 0; i < 4; i++) {
                if (toggle_time) {
                    circle(temp_img, Point(out_points[i][0], out_points[i][1]), 3, Scalar(255, 255, 255), 3);
                }
            }
        }

        spinnerCallback(0);
    }
    else if (event == EVENT_MOUSEMOVE && event == EVENT_LBUTTONDOWN) {
        if (Min_PointIndex != -1) {
            out_points[Min_PointIndex][0] = x;
            out_points[Min_PointIndex][1] = y;

            src_x1_spinner->set_int_val(points[0][0]);
            src_y1_spinner->set_int_val(points[0][1]);

            src_x2_spinner->set_int_val(points[1][0]);
            src_y2_spinner->set_int_val(points[1][1]);

            src_x3_spinner->set_int_val(points[2][0]);
            src_y3_spinner->set_int_val(points[2][1]);

            src_x4_spinner->set_int_val(points[3][0]);
            src_y4_spinner->set_int_val(points[3][1]);

            dst_x1_spinner->set_int_val(out_points[0][0]);
            dst_y1_spinner->set_int_val(out_points[0][1]);

            dst_x2_spinner->set_int_val(out_points[1][0]);
            dst_y2_spinner->set_int_val(out_points[1][1]);

            dst_x3_spinner->set_int_val(out_points[2][0]);
            dst_y3_spinner->set_int_val(out_points[2][1]);

            dst_x4_spinner->set_int_val(out_points[3][0]);
            dst_y4_spinner->set_int_val(out_points[3][1]);


            if (Min_PointIndex == 0) {
                dst_x1 = out_points[0][0];
                dst_y1 = out_points[0][1];
            }
            else if (Min_PointIndex == 1) {
                dst_x2 = out_points[1][0];
                dst_y2 = out_points[1][1];
            }
            else if (Min_PointIndex == 2) {
                dst_x3 = out_points[2][0];
                dst_y3 = out_points[2][1];
            }
            else if (Min_PointIndex == 3) {
                dst_x4 = out_points[3][0];
                dst_y4 = out_points[3][1];
            }
        }
    }
    else if (event == EVENT_LBUTTONUP) {
        drawing = false;
        Min_PointIndex = -1;
    }

    if (perspective == 0) {
        for (int i = 0; i < 3; i++) {
            if (toggle_time) {
                circle(temp_img, Point(out_points[i][0], out_points[i][1]), 3, Scalar(255, 255, 255), 3);
            }
        }
    }
    else if (perspective == 1) {
        for (int i = 0; i < 4; i++) {
            if (toggle_time) {
                circle(temp_img, Point(out_points[i][0], out_points[i][1]), 3, Scalar(255, 255, 255), 3);
            }
        }
    }
    imshow("dst", temp_img); 
}

void drawDstCircles() {
    Mat temp_img = out.clone(); 
    if (toggle_time) { 
        for (int i = 0; i < (perspective == 0 ? 3 : 4); i++) {
            circle(temp_img, Point(out_points[i][0], out_points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
    }

    imshow("dst", temp_img); 

}

void drawSrcCircles() {
    Mat temp_img = img.clone();
    if (perspective == 0) {
        for (int i = 0; i < 3; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
    }
    else if (perspective == 1) {
        for (int i = 0; i < 4; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
    }
}

void toggle(int) {
    toggle_time = ~toggle_time;
    Mat temp_img = img.clone();
    if (toggle_time) { 
        int num_points = (perspective == 0) ? 3 : 4; 
        for (int i = 0; i < num_points; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
    }
    imshow("src", temp_img);
    Perspective_in(perspective);
    waitKey(1);
}

void drawCircle(int event, int x, int y, int, void* param) {
    static int Min_PointIndex = -1; 
    Mat temp_img = img.clone(); 

    if (event == EVENT_LBUTTONDOWN) {
        drawing = true;
        Min_PointIndex = findClosestPoint(x, y);
        points[Min_PointIndex][0] = x;
        points[Min_PointIndex][1] = y;
        setSpinner();
        if (perspective == 0) {
            for (int i = 0; i < 3; i++) {
                circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
            }
        }
        else if (perspective == 1) {
            for (int i = 0; i < 4; i++) {
                circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
            }
        }
        spinnerCallback(0);
    }
    else if (event == EVENT_MOUSEMOVE && drawing) {
        if (Min_PointIndex != -1) {
            points[Min_PointIndex][0] = x;
            points[Min_PointIndex][1] = y;

            setSpinner();


            if (Min_PointIndex == 0) {
                src_x1 = points[0][0];
                src_y1 = points[0][1];
            }
            else if (Min_PointIndex == 1) {
                src_x2 = points[1][0];
                src_y2 = points[1][1];
            }
            else if (Min_PointIndex == 2) {
                src_x3 = points[2][0];
                src_y3 = points[2][1];
            }
            else if (Min_PointIndex == 3) {
                src_x4 = points[3][0];
                src_y4 = points[3][1];
            }
        }
    }
    else if (event == EVENT_LBUTTONUP) {
        drawing = false;
        Min_PointIndex = -1;
    }
    if (perspective == 0) {
        for (int i = 0; i < 3; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
    }
    else if (perspective == 1) {
        for (int i = 0; i < 4; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
    }
    spinnerCallback(0);
    imshow("src", temp_img); 
}

void read_file(int) {
    OpenFileDialog* openFileDialog = new OpenFileDialog();
    if (openFileDialog->ShowDialog()) {
        Filename = openFileDialog->FileName;
        img = imread(Filename);
        if (img.empty()) {
            cerr << "Error: Could not open the file!" << endl;
            return;
        }

        rf = 1; 

        src_x1_spinner->set_int_limits(0, img.cols);
        src_y1_spinner->set_int_limits(0, img.rows);
        src_x2_spinner->set_int_limits(0, img.cols);
        src_y2_spinner->set_int_limits(0, img.rows);
        src_x3_spinner->set_int_limits(0, img.cols);
        src_y3_spinner->set_int_limits(0, img.rows);
        src_x4_spinner->set_int_limits(0, img.cols);
        src_y4_spinner->set_int_limits(0, img.rows);

        dst_x1_spinner->set_int_limits(0, img.cols);
        dst_y1_spinner->set_int_limits(0, img.rows);
        dst_x2_spinner->set_int_limits(0, img.cols);
        dst_y2_spinner->set_int_limits(0, img.rows);
        dst_x3_spinner->set_int_limits(0, img.cols);
        dst_y3_spinner->set_int_limits(0, img.rows);
        dst_x4_spinner->set_int_limits(0, img.cols);
        dst_y4_spinner->set_int_limits(0, img.rows);
        Mat temp_img = img.clone(); 
        points[0][0] = 0;
        points[0][1] = src_y1;
        points[1][0] = img.cols;
        points[1][1] = 0;
        points[2][0] = 0;
        points[2][1] = img.rows;
        out_points[0][0] = 0;
        out_points[0][1] = dst_y1;
        out_points[1][0] = img.cols;
        out_points[1][1] = 0;
        out_points[2][0] = 0;
        out_points[2][1] = img.rows;

        if (perspective == 1) {
            points[3][0] = img.cols;
            points[3][1] = img.rows;
            out_points[3][0] = img.cols;
            out_points[3][1] = img.rows;
        }

        int num_points = (perspective == 0) ? 3 : 4; 
        for (int i = 0; i < num_points; i++) {
            circle(temp_img, Point(points[i][0], points[i][1]), 3, Scalar(255, 255, 255), 3);
        }
        setSpinner();
        imshow("src", temp_img);
        out = img.clone();
        imshow("dst", out);
    }
}


void save_file(int) {
    SaveFileDialog* openFileDialog = new SaveFileDialog();
    if (openFileDialog->ShowDialog()) {
        Filename = openFileDialog->FileName;
        imwrite(Filename, out);
    }
}

void quit(int) {
    exit(0);
}

int main(int argc, char* argv[]) {
    glutInit(&argc, argv);
    GLUI* glui = GLUI_Master.create_glui("Menu", 0);
    main_window = glui->get_glut_window_id();
    imshow("src", img);
    imshow("dst", out);
    setMouseCallback("src", drawCircle);
    setMouseCallback("dst", dst_drawCircle);

    // SRC Panel
    GLUI_Panel* src_panel = glui->add_panel("SRC");
    GLUI_Panel* src_1_panel = glui->add_panel_to_panel(src_panel, "", GLUI_PANEL_EMBOSSED);
    src_x1_spinner = glui->add_spinner_to_panel(src_1_panel, "x1", GLUI_SPINNER_INT, &points[0][0], 0, spinnerCallback);
    src_x1_spinner->set_int_limits(0, img.cols);

    new GLUI_Column(src_1_panel, false);
    src_y1_spinner = glui->add_spinner_to_panel(src_1_panel, "y1", GLUI_SPINNER_INT, &points[0][1], 0, spinnerCallback);
    src_y1_spinner->set_int_limits(0, img.rows);
    GLUI_Panel* src_2_panel = glui->add_panel_to_panel(src_panel, "", GLUI_PANEL_EMBOSSED);
    src_x2_spinner = glui->add_spinner_to_panel(src_2_panel, "x2", GLUI_SPINNER_INT, &points[1][0], 0, spinnerCallback);
    src_x2_spinner->set_int_limits(0, img.cols);

    new GLUI_Column(src_2_panel, false);
    src_y2_spinner = glui->add_spinner_to_panel(src_2_panel, "y2", GLUI_SPINNER_INT, &points[1][1], 0, spinnerCallback);
    src_y2_spinner->set_int_limits(0, img.rows);

    GLUI_Panel* src_3_panel = glui->add_panel_to_panel(src_panel, "", GLUI_PANEL_EMBOSSED);
    src_x3_spinner = glui->add_spinner_to_panel(src_3_panel, "x3", GLUI_SPINNER_INT, &points[2][0], 0, spinnerCallback);
    src_x3_spinner->set_int_limits(0, img.cols);

    new GLUI_Column(src_3_panel, false);
    src_y3_spinner = glui->add_spinner_to_panel(src_3_panel, "y3", GLUI_SPINNER_INT, &points[2][1], 0, spinnerCallback);
    src_y3_spinner->set_int_limits(0, img.rows);

    GLUI_Panel* src_4_panel = glui->add_panel_to_panel(src_panel, "", GLUI_PANEL_EMBOSSED);
    src_x4_spinner = glui->add_spinner_to_panel(src_4_panel, "x4", GLUI_SPINNER_INT, &points[3][0], 0, spinnerCallback);
    src_x4_spinner->set_int_limits(0, img.cols);

    new GLUI_Column(src_4_panel, false);
    src_y4_spinner = glui->add_spinner_to_panel(src_4_panel, "y4", GLUI_SPINNER_INT, &points[3][1], 0, spinnerCallback);
    src_y4_spinner->set_int_limits(0, img.rows);

    // DST Panel
    GLUI_Panel* dst_panel = glui->add_panel("DST");
    GLUI_Panel* dst_1_panel = glui->add_panel_to_panel(dst_panel, "", GLUI_PANEL_EMBOSSED);
    dst_x1_spinner = glui->add_spinner_to_panel(dst_1_panel, "x1", GLUI_SPINNER_INT, &out_points[0][0], 0, spinnerCallback);
    dst_x1_spinner->set_int_limits(0, img.cols);

    new GLUI_Column(dst_1_panel, false);
    dst_y1_spinner = glui->add_spinner_to_panel(dst_1_panel, "y1", GLUI_SPINNER_INT, &out_points[0][1], 0, spinnerCallback);
    dst_y1_spinner->set_int_limits(0, img.rows);
    GLUI_Panel* dst_2_panel = glui->add_panel_to_panel(dst_panel, "", GLUI_PANEL_EMBOSSED);
    dst_x2_spinner = glui->add_spinner_to_panel(dst_2_panel, "x2", GLUI_SPINNER_INT, &out_points[1][0], 0, spinnerCallback);
    dst_x2_spinner->set_int_limits(0, img.cols);

    new GLUI_Column(dst_2_panel, false);
    dst_y2_spinner = glui->add_spinner_to_panel(dst_2_panel, "y2", GLUI_SPINNER_INT, &out_points[1][1], 0, spinnerCallback);
    dst_y2_spinner->set_int_limits(0, img.rows);
    GLUI_Panel* dst_3_panel = glui->add_panel_to_panel(dst_panel, "", GLUI_PANEL_EMBOSSED);
    dst_x3_spinner = glui->add_spinner_to_panel(dst_3_panel, "x3", GLUI_SPINNER_INT, &out_points[2][0], 0, spinnerCallback);
    dst_x3_spinner->set_int_limits(0, img.cols);

    new GLUI_Column(dst_3_panel, false);
    dst_y3_spinner = glui->add_spinner_to_panel(dst_3_panel, "y3", GLUI_SPINNER_INT, &out_points[2][1], 0, spinnerCallback);
    dst_y3_spinner->set_int_limits(0, img.rows);
    GLUI_Panel* dst_4_panel = glui->add_panel_to_panel(dst_panel, "", GLUI_PANEL_EMBOSSED);
    dst_x4_spinner = glui->add_spinner_to_panel(dst_4_panel, "x4", GLUI_SPINNER_INT, &out_points[3][0], 0, spinnerCallback);
    dst_x4_spinner->set_int_limits(0, img.cols);

    new GLUI_Column(dst_4_panel, false);
    dst_y4_spinner = glui->add_spinner_to_panel(dst_4_panel, "y4", GLUI_SPINNER_INT, &out_points[3][1], 0, spinnerCallback);
    dst_y4_spinner->set_int_limits(0, img.rows);

    // Control Panel
    GLUI_Panel* control_panel = glui->add_panel("");
    glui->add_checkbox_to_panel(control_panel, "Perspective", &perspective, 0, (GLUI_CB)update_spinners);
    new GLUI_Column(control_panel, false);
    glui->add_button_to_panel(control_panel, "Toggle", 0, (GLUI_CB)toggle);

    // Action Panel
    GLUI_Panel* action_panel = glui->add_panel("");
    glui->add_button_to_panel(action_panel, "Read", 0, (GLUI_CB)read_file);
    new GLUI_Column(action_panel, false);
    glui->add_button_to_panel(action_panel, "Save", 0, (GLUI_CB)save_file);
    new GLUI_Column(action_panel, false);
    glui->add_button_to_panel(action_panel, "Quit", 0, (GLUI_CB)quit);

    update_spinners(perspective);
    glui->set_main_gfx_window(main_window);
    GLUI_Master.set_glutIdleFunc(NULL);
    glutMainLoop();

    return 0;
}
